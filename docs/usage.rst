=====
Usage
=====

Models
------

There are 4 models in Pancake's world:
 * :class:`~pancake.models.Contact`: associate to a real world user and his notification limit preference
 * :class:`~pancake.models.Media`: a way to notify user
 * :class:`~pancake.models.Event`: anything of interest of a user that occurs in the system
 * :class:`~pancake.models.Subscription`: a notification rule

For more details of the models, see `/docs` or :mod:`pancake.models`.

Usage
-----

The pancake service is exposed via HTTP. To use it, the simplest way is via
the `requests` lib::

    from requests import Session
    session = Session()
    session.headers["Content-Type"] = "application/json"
    # url to pancake
    server = "http://localhost:8080"

First a contact need to be created for a user::

    # create contact for user "harry"
    # allow 2 notifications per day(86400 sec)
    r = requests.post(server + "/contact/", data=json.dumps({
        "user_id": "harry",
        "notifications": 2,
        "interval": 86400,
    }))
    print r.status_code  # 201
    contact = r.json()
    # create 2 media for the contact
    r = request.post(server + "/media/", data=json.dumps([{
        "type": "email",
        "address": "blurrcat@gmail.com",
        "contact": contact["_id"]
    }]))
    print r.status_code  # 201
    media_email = r.json()

To receive notifications for events, create subscriptions::

    from datetime import datetime
    # notify me via email if level of event "battery low" is WARNING or above
    # in the following 2 days
    request.post(server + "/subscription/", data=json.dumps({
        "user_id": "harry",
        "event": "battery low",
        "level": 3,  # WARNING
        "start_time": datetime(2015, 2, 3),
        "end_time": datetime(2015, 2, 5),
        "media": media_email["_id"],
    }))

Now the following event would trigger an email notification to me::

    request.post(server + "/event/", data=json.dumps({
        "event": "battery_low",
        "level": 4, # CRITICAL
        "time": datetime(2015, 2, 4),
        "user_id": "harry",
        "data": {
            "device": "Fitbit Flex",
            "subdomain": "dev",
            "organization": "detalytics",
        },
    }))

The event is likely to be generated by other parts of the system.

Coordination with the Notification Service
------------------------------------------
Pancake uses the `notification service(NS)`_ to actually send email/sms to users.
The content of the notifications is defined on NS' side via Jinja templates.
When pancake needs to send a notification, it names the templates it wants and
passes necessary context to NS. The template names are derived from the event names,
and context from `event['data']`.

Continuing the previous example, pancake sends the following request to NS'
email notification endpoint:

.. sourcecode:: http

    POST /email/battery low.subject/battery low.txt,battery low.html/blurrcat@gmail.com HTTP/1.1
    Content-Type: application/x-www-form-urlencoded

    context={
        "event": "battery_low",
        "level": 4,
        "time": "Tue Feb 03 2015 00:00:00 GMT+0800 (SGT)",
        "user_id": "harry",
        "device": "Fitbit Flex",
        "subdomain": "dev",
        "organization": "detalytics",
    }

NS will try to render an email with the templates:
* battery low.subject: as email subject
* battery low.txt: as plain text email body
* battery low.html: as html email body(optional)

The user need to create templates for each event before hand, otherwise NS
returns 404s.


.. _notification service(NS): https://github.com/tryagainconcepts/notification
